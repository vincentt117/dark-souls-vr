apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "org.artoolkit.ar6.artracking"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
}

/**
 * If you want to link the app to a central AR6J.aar instead of integrating the AR6J project into
 * your project you can do so with the specified repository below and by uncommenting the compile
 * of the .aar file in the dependencies.
 * You can see if the linking works by looking into the build directory of the app:
 * build/intermediates/exploded-aar in this directory you should see AR6J-release.
 */
allprojects {
    repositories {
        jcenter()
        flatDir {
            dirs '../../../../../../SDK/lib/AR6J'
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.2.0'
    // compile(name:'AR6J-release', ext:'aar') // This links the AR6J-release library from the repository specified above ('../../../../../../SDK/lib/AR6J').
    compile project(':AR6J')                   // If you want to develop AR6J and test it with ARTrackingExample you need to un-commend this line and
                                               // comment-out the line above.
}

// Task Actions is defined by task type of Copy. To reference a variable within a string, the string has to be delimited by " rather than '.
// Don't ask me why. The problem is when it comes to tasks, they're created once and stay static so there's no way to use a variable who
// value may change after the task is created. Insane.
task CopyToDBFolderToAssetsDebug(type: Copy) {
    from "../../../../../../Source/etc/android/cparam_cache"
    into "build/intermediates/assets/debug/cparam_cache"
}

task CopyToDBFolderToAssetsRelease(type: Copy) {
    from "../../../../../../Source/etc/android/cparam_cache"
    into "build/intermediates/assets/release/cparam_cache"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'mergeDebugAssets') {
        println "** mergeDebugAssets ADDED **"
    }
    if (task.name == 'mergeReleaseAssets') {
        println "** mergeReleaseAssets ADDED **"
    }
}

// Task mergeDebugAssets and mergeReleaseAsset are a dynamically created Android build task that is not available until after the project's
// gradle configuration phase completes. afterEvaluate is Android gradle DSL hook that is called when the project's gradle configuration phase completes.
afterEvaluate { project ->
    println "** In afterEvaluate **"

    if (null != project.tasks.findByName("mergeDebugAssets")) {
        println "** IN project.tasks.findByName(\"mergeDebugAssets\") setting up doLast action **"
        project.tasks.mergeDebugAssets << {
            println "** Executing custom task CopyToDBFolderToAssets for \"debug\" build **"
            CopyToDBFolderToAssetsDebug.execute()
        }
    }

    if (null != project.tasks.findByName("mergeReleaseAssets")) {
        println "** IN project.tasks.findByName(\"mergeReleaseAssets\") setting up doLast action **"
        project.tasks.mergeReleaseAssets << {
            println "** Executing custom task CopyToDBFolderToAssets for \"release\" build **"
            CopyToDBFolderToAssetsRelease.execute()
        }
    }
}